#!/usr/bin/env python3

# A script for comparing Kubernetes manifests across environments
# Try running with --help for usage info.

import argparse
import glob
import json
import logging
import os
import re
import subprocess

from collections import OrderedDict

# Utility class for answering questions about a directory of rendered
# manifests.
class Manifests:
    def __init__(self, dir):
        self.dir = os.path.abspath(dir)

        dirs = glob.glob(f"{self.dir}/*")
        self._environments = set(map(lambda f : os.path.basename(f), dirs))

    #
    # List all environments in a directory of rendered manifests
    #
    def environments(self):
        return self._environments


class Differ:
    def __init__(self, manifests1, manifests2):
        self.manifests1 = manifests1
        self.manifests2 = manifests2

    #
    # Compare two directories of rendered templates and return
    # a dictionary representing any discovered differences. Eg.
    # {
    #   'env1': { 'status': 'changed', 'diff': 'DIFF_OUTPUT' }
    #   'env2': { 'status': 'added',   'diff': 'DIFF_OUTPUT' }
    #   'env3': { 'status': 'deleted', 'diff': 'DIFF_OUTPUT' }
    # }
    #
    # If there are no differences, the dict will be empty
    #
    def diff(self):
        envs1 = self.manifests1.environments()
        envs2 = self.manifests2.environments()
        envs_all = envs1.union(envs2)

        dir1 = self.manifests1.dir
        dir2 = self.manifests2.dir

        diffs = OrderedDict()

        for env in sorted(envs_all):
            d1 = os.path.join(dir1, env)
            d2 = os.path.join(dir2, env)

            os.makedirs(d1, exist_ok=True)
            os.makedirs(d2, exist_ok=True)

            cmd = ['diff', '-r', '-N', '-u', d1, d2]
            logging.info(f"cmd: {cmd}")
            result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

            stdout = result.stdout.decode('utf-8')
            stderr = result.stderr.decode('utf-8')
            logging.debug(f"cmd out:\n{stdout}")
            logging.debug(f"cmd err:\n{stderr}")

            if result.returncode == 0:
                logging.info(f"{env}: unchanged")
            elif result.returncode == 1:
                status = 'changed'
                if (env in envs1) and (env not in envs2):
                    status = 'deleted'
                elif (env not in envs1) and (env in envs2):
                    status = 'created'

                logging.info(f"{env}: {status}")

                diffs[env] = {
                    'status': status,
                    'diff': stdout
                }
            else:
                raise RuntimeError(f"Command exited {result.returncode}: {cmd}\n{result.stderr.decode('utf-8')}")

        return diffs

class CLI:
    def run(self):
        parser = self.build_parser()
        args = parser.parse_args()
        self.setup_logging(args)
        self.diff(args.base, args.head, args.output_dir)

    def build_parser(self):
        parser = argparse.ArgumentParser(description='A tool for generating diffs of Kubernetes manifests across environments')

        parser.add_argument('--debug', help='Enable debug logging', action='store_true')
        parser.add_argument('base', metavar='BASE', help='Directory containing original manifests')
        parser.add_argument('head', metavar='HEAD', help='Directory containing updated manifests')
        parser.add_argument('--output-dir', default='output', metavar='DIR', help='Directory where output will be stored')

        return parser

    # Generate diff
    def diff(self, base, head, output_dir):
        manifests1 = Manifests(base)
        manifests2 = Manifests(head)

        diffs = Differ(manifests1, manifests2).diff()

        self.save_as_markdown(diffs, output_dir)
        self.save_as_json(diffs, output_dir)

    # Generate markdown summary and save to file in output dir
    def save_as_markdown(self, diffs, output_dir):
        markdown = self.create_markdown_summary(diffs)
        self.write(markdown, output_dir, 'diff.md')

    # Serialize diff data into JSON file in output dir
    def save_as_json(self, diffs, output_dir):
        self.write(json.dumps(diffs, indent=4), output_dir, 'diff.json')

    # Convenience function to write a string to a file
    def write(self, content, output_dir, filename, desc='diff'):
        file = os.path.join(output_dir, filename)

        logging.info(f"Writing {desc} to {file}")
        os.makedirs(output_dir, exist_ok=True)
        with open(file, 'w') as f:
            f.write(content)

    # Create a markdown summary of all environment diffs.
    # Each environment is in a separate section with collapsible diff.
    def create_markdown_summary(self, diffs):
        content = '### terra-helmfile diff\n\n'

        plural = '' if len(diffs) == 1 else 's'
        content += f"This PR will update {len(diffs)} environment{plural}.\n\n"

        for env, result in diffs.items():
            content += '<details>\n'

            headline = env
            if result['status'] != 'changed':
                headline = f"{headline} ({result['status']})"

            content += f"<summary><strong>{headline}</strong></summary>\n"
            content += "\n"
            content += "```diff\n"
            content += result['diff']
            content += "```\n"
            content += '</details>\n\n'

        if 'prod' in diffs:
            content += "Changes to **prod** require at least one approval.\n\n"

        return content

    def setup_logging(self, args):
        logging.basicConfig(level=logging.INFO,
                            format='[%(levelname)-5s] %(message)s')
        if args.debug:
            logging.getLogger().setLevel(logging.DEBUG)

CLI().run()

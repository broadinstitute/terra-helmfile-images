---
# Source: workspacemanager/templates/configmaps/proxy-apache-httpd-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: workspacemanager-proxy-configmap
  labels:
    helm.sh/chart: "workspacemanager-0.33.0"
    app.kubernetes.io/name: workspacemanager
    app.kubernetes.io/instance: "workspacemanager"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: workspacemanager
    app.kubernetes.io/part-of: terra
data:
  apache-httpd-proxy-config: |-
    ServerAdmin ${SERVER_ADMIN}
    ServerName workspace.wsmtest.integ.envs.broadinstitute.org
    ServerTokens ProductOnly
    TraceEnable off

    LogFormat "%h %l %u \"%{OIDC_CLAIM_email}i\" \"%{X-App-ID}i\" [%{%FT%T}t.%{msec_frac}t%{%z}t] %D %X \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
    LogFormat "%{X-Forwarded-For}i %l %u \"%{OIDC_CLAIM_email}i\" \"%{X-App-ID}i\" [%{%FT%T}t.%{msec_frac}t%{%z}t] %D %X \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" proxy
    SetEnvIf X-Forwarded-For "^.*\..*\..*\..*" forwarded
    CustomLog "/dev/stdout" combined env=!forwarded
    CustomLog "/dev/stdout" proxy env=forwarded

    LogLevel debug

    Header unset X-Frame-Options
    Header always set X-Frame-Options SAMEORIGIN
    Header unset X-XSS-Protection
    Header always set X-XSS-Protection "1; mode=block"
    Header unset X-Content-Type-Options
    Header always set X-Content-Type-Options: nosniff
    Header unset Strict-Transport-Security
    Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains"

    ProxyTimeout ${PROXY_TIMEOUT}
    OIDCOAuthTokenIntrospectionInterval 60
    LDAPCacheTTL ${LDAP_CACHE_TTL}
    LDAPRetries 5
    LDAPRetryDelay 1
    LDAPConnectionPoolTTL 30

    <VirtualHost _default_:${HTTPD_PORT}>
      ErrorLog /dev/stdout
      CustomLog "/dev/stdout" combined
      Redirect / https://workspace.wsmtest.integ.envs.broadinstitute.org/
    </VirtualHost>

    <VirtualHost _default_:${SSL_HTTPD_PORT}>
        ServerAdmin ${SERVER_ADMIN}
        ServerName workspace.wsmtest.integ.envs.broadinstitute.org

        SSLEngine On
        SSLProxyEngine On
        SSLCertificateFile /etc/ssl/certs/server.crt
        SSLCertificateKeyFile /etc/ssl/private/server.key
        

        ErrorLog /dev/stdout
        CustomLog "/dev/stdout" combined

        <Location ${PROXY_PATH}>
          RewriteCond %{REQUEST_METHOD} OPTIONS
          RewriteRule ^(.*)$ $1 [R=204,L]

          <Limit OPTIONS>
              Require all granted
          </Limit>

          ${AUTH_TYPE}
          ${AUTH_REQUIRE}

          ProxyPass http://localhost:8080/
          ProxyPassReverse http://localhost:8080/
        </Location>

        <Location ${PROXY_PATH2}>
          Header unset Access-Control-Allow-Origin
          Header always set Access-Control-Allow-Origin "*"
          Header unset Access-Control-Allow-Headers
          Header always set Access-Control-Allow-Headers "authorization,content-type,accept,origin,x-app-id"
          Header unset Access-Control-Allow-Methods
          Header always set Access-Control-Allow-Methods "GET,POST,PUT,PATCH,DELETE,OPTIONS,HEAD"
          Header unset Access-Control-Max-Age
          Header always set Access-Control-Max-Age 1728000

          RewriteEngine On
          RewriteCond %{REQUEST_METHOD} OPTIONS
          RewriteRule ^(.*)$ $1 [R=204,L]

          <Limit OPTIONS>
              Require all granted
          </Limit>

          ${AUTH_TYPE2}
          ${AUTH_LDAP_URL2}
          ${AUTH_LDAP_GROUP_ATTR2}
          ${AUTH_LDAP_BIND_DN2}
          AuthLDAPBindPassword ${PROXY_LDAP_BIND_PASSWORD}
          AuthLDAPMaxSubGroupDepth 0

          <RequireAll>
            <RequireAll>
              ${AUTH_REQUIRE2}
            </RequireAll>
            <RequireAny>
              Require claims_expr '((.email|endswith(".gserviceaccount.com")) or ((.email|endswith("@preprod.researchallofus.org")) and (.audience as $idkey | "${AOU_PREPROD_WHITELIST}" | split(",") | map(. as $element | $idkey | startswith($element)))) or ((.email|endswith("@perf.fake-research-aou.org")) and (.audience as $idkey | "${AOU_PERF_WHITELIST}" | split(",") | map(. as $element | $idkey | startswith($element)))) or ((.email|endswith("@researchallofus.org")) and (.audience as $idkey | "${AOU_PROD_WHITELIST}" | split(",") | map(. as $element | $idkey | startswith($element)))) or ((.email|endswith("@fake-research-aou.org")) and (.audience as $idkey | "${AOU_DEV_WHITELIST}" | split(",") | map(. as $element | $idkey | startswith($element)))) or ((.email|endswith("@stable.fake-research-aou.org")) and (.audience as $idkey | "${AOU_STABLE_WHITELIST}" | split(",") | map(. as $element | $idkey | startswith($element)))) or ((.email|endswith("@staging.fake-research-aou.org")) and (.audience as $idkey | "${AOU_STAGING_WHITELIST}" | split(",") | map(. as $element | $idkey | startswith($element)))) or (((.email|endswith("@researchallofus.org")|not) and (.email|endswith("@preprod.researchallofus.org")|not) and (.email|endswith("@staging.fake-research-aou.org")|not) and (.email|endswith("@stable.fake-research-aou.org")|not) and (.email|endswith("@perf.fake-research-aou.org")|not) and (.email|endswith("@fake-research-aou.org")|not)) and (.audience as $idkey | "${TERRA_ID_WHITELIST}" | split(",") | map(. as $element | $idkey | startswith($element)))))'
            </RequireAny>
          </RequireAll>

          ProxyPass http://localhost:8080/api
          ProxyPassReverse http://localhost:8080/api

          AddOutputFilterByType DEFLATE application/json text/plain text/html application/javascript application/x-javascript
        </Location>
    </VirtualHost>
